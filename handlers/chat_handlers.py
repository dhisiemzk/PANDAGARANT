import logging
import aiohttp
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from utils.keyboards import get_back_to_main_keyboard
from utils.validators import format_amount

logger = logging.getLogger(__name__)
router = Router()

class ChatStates(StatesGroup):
    waiting_for_message = State()

@router.callback_query(F.data.startswith("deal_chat_"))
async def show_deal_chat(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
    deal_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–¥–µ–ª–∫–µ
    deal = await db.get_deal_by_id(deal_id)
    if not deal or user_id not in [deal.get('seller_id'), deal.get('buyer_id'), deal.get('guarantor_id')]:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É", show_alert=True)
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await db.mark_messages_as_read(deal_id, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    page = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    messages_per_page = 15
    messages = await db.get_deal_messages(deal_id, limit=messages_per_page)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    import aiosqlite
    async with aiosqlite.connect(db.db_path) as database:
        async with database.execute(
            'SELECT COUNT(*) FROM deal_messages WHERE deal_id = ?', (deal_id,)
        ) as cursor:
            total_messages = (await cursor.fetchone())[0]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–∞—Ç–∞
    if not messages:
        chat_text = f"üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**\n\n_–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç_\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è!"
    else:
        shown_count = len(messages)
        chat_text = f"üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**\n"
        if total_messages > messages_per_page:
            chat_text += f"üìù –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {shown_count} –∏–∑ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        else:
            chat_text += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n\n"
        
        for msg in messages[-messages_per_page:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if msg['message_type'] == 'system':
                sender = "ü§ñ –°–∏—Å—Ç–µ–º–∞"
            else:
                name = msg['first_name'] or msg['username'] or f"ID{msg['user_id']}"
                if msg['user_id'] == deal['seller_id']:
                    sender = f"üîπ {name} (–ü—Ä–æ–¥–∞–≤–µ—Ü)"
                elif msg['user_id'] == deal['buyer_id']:
                    sender = f"üî∏ {name} (–ü–æ–∫—É–ø–∞—Ç–µ–ª—å)"
                elif msg['user_id'] == deal['guarantor_id']:
                    sender = f"üë®‚Äçüíº {name} (–ì–∞—Ä–∞–Ω—Ç)"
                else:
                    sender = f"‚ùì {name}"
            
            time_str = msg['created_at'][:16] if msg['created_at'] else ""
            message_text = msg['message_text'][:100] + "..." if len(msg['message_text']) > 100 else msg['message_text']
            
            chat_text += f"`{time_str}` {sender}:\n{message_text}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    if deal['status'] not in ['completed', 'cancelled']:
        buttons.append([InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"write_message_{deal_id}")])
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        status_text = "–∑–∞–≤–µ—Ä—à—ë–Ω" if deal['status'] == 'completed' else "–∑–∞–∫—Ä—ã—Ç"
        chat_text += f"\nüîí **–ß–∞—Ç {status_text}** - –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
    
    buttons.append([InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞", callback_data=f"export_chat_{deal_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if total_messages > messages_per_page:
        nav_buttons = []
        nav_buttons.append(InlineKeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data=f"chat_show_all_{deal_id}"))
        if total_messages > 50:  # –ï—Å–ª–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÜÔ∏è –°—Ç–∞—Ä—ã–µ", callback_data=f"chat_older_{deal_id}"))
        buttons.append(nav_buttons)
    
    buttons.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"deal_chat_{deal_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–¥–µ–ª–∫–µ", callback_data="my_deals")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        await callback.message.edit_text(
            chat_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.answer(
                chat_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {e2}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞", show_alert=True)
            return
    
    await callback.answer()

@router.callback_query(F.data.startswith("write_message_"))
async def start_write_message(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    deal_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    deal = await db.get_deal_by_id(deal_id)
    if not deal or user_id not in [deal.get('seller_id'), deal.get('buyer_id'), deal.get('guarantor_id')]:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ - –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
    if deal['status'] in ['completed', 'cancelled']:
        status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" if deal['status'] == 'completed' else "–æ—Ç–º–µ–Ω–µ–Ω–∞"
        await callback.answer(f"‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç. –°–¥–µ–ª–∫–∞ {status_text}.", show_alert=True)
        return
    
    await state.set_state(ChatStates.waiting_for_message)
    await state.update_data(deal_id=deal_id)
    
    await callback.message.edit_text(
        f"‚úçÔ∏è **–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"deal_chat_{deal_id}")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(ChatStates.waiting_for_message)
async def process_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞"""
    data = await state.get_data()
    deal_id = data.get('deal_id')
    user_id = message.from_user.id
    
    if not deal_id:
        await message.answer("–û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Å–Ω–æ–≤–∞
    deal = await db.get_deal_by_id(deal_id)
    if not deal or user_id not in [deal.get('seller_id'), deal.get('buyer_id'), deal.get('guarantor_id')]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ - –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
    if deal['status'] in ['completed', 'cancelled']:
        status_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" if deal['status'] == 'completed' else "–æ—Ç–º–µ–Ω–µ–Ω–∞"
        await message.answer(f"‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç. –°–¥–µ–ª–∫–∞ {status_text}.")
        await state.clear()
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = message.text[:1000] if message.text else "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    success = await db.add_deal_message(deal_id, user_id, message_text)
    
    if success:
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        await send_chat_notifications(deal, user_id, message_text, message.bot)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —á–∞—Ç—É
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∞—Ç–æ–º
        await send_updated_chat(message, deal_id)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await state.clear()

async def send_updated_chat(message: Message, deal_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    deal = await db.get_deal_by_id(deal_id)
    if not deal:
        await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (—É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∞–¥–º–∏–Ω)
    from config import OWNER_ID
    if user_id not in [deal.get('seller_id'), deal.get('buyer_id'), deal.get('guarantor_id')] and user_id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await db.mark_messages_as_read(deal_id, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_per_page = 15
    messages = await db.get_deal_messages(deal_id, limit=messages_per_page)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    import aiosqlite
    async with aiosqlite.connect(db.db_path) as database:
        async with database.execute(
            'SELECT COUNT(*) FROM deal_messages WHERE deal_id = ?', (deal_id,)
        ) as cursor:
            total_messages = (await cursor.fetchone())[0]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–∞—Ç–∞
    if not messages:
        chat_text = f"üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**\n\n_–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç_"
    else:
        shown_count = len(messages)
        chat_text = f"üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**\n"
        if total_messages > messages_per_page:
            chat_text += f"üìù –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {shown_count} –∏–∑ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        else:
            chat_text += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n\n"
        
        for msg in messages[-messages_per_page:]:
            if msg['message_type'] == 'system':
                sender = "ü§ñ –°–∏—Å—Ç–µ–º–∞"
            else:
                name = msg['first_name'] or msg['username'] or f"ID{msg['user_id']}"
                if msg['user_id'] == deal['seller_id']:
                    sender = f"üîπ {name}"
                elif msg['user_id'] == deal['buyer_id']:
                    sender = f"üî∏ {name}"
                elif msg['user_id'] == deal['guarantor_id']:
                    sender = f"üë®‚Äçüíº {name}"
                else:
                    sender = f"‚ùì {name}"
            
            time_str = msg['created_at'][:16] if msg['created_at'] else ""
            message_text = msg['message_text'][:150] + "..." if len(msg['message_text']) > 150 else msg['message_text']
            
            chat_text += f"`{time_str}` {sender}:\n{message_text}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    if deal['status'] not in ['completed', 'cancelled']:
        buttons.append([InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"write_message_{deal_id}")])
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        status_text = "–∑–∞–≤–µ—Ä—à—ë–Ω" if deal['status'] == 'completed' else "–∑–∞–∫—Ä—ã—Ç"
        chat_text += f"\nüîí **–ß–∞—Ç {status_text}** - –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
    
    buttons.append([InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞", callback_data=f"export_chat_{deal_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if total_messages > messages_per_page:
        nav_buttons = []
        nav_buttons.append(InlineKeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data=f"chat_show_all_{deal_id}"))
        if total_messages > 50:  # –ï—Å–ª–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÜÔ∏è –°—Ç–∞—Ä—ã–µ", callback_data=f"chat_older_{deal_id}"))
        buttons.append(nav_buttons)
    
    buttons.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"deal_chat_{deal_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–¥–µ–ª–∫–µ", callback_data="my_deals")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.answer(
            chat_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞")

async def send_chat_notifications(deal: dict, sender_id: int, message_text: str, bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    participants = [deal['seller_id'], deal['buyer_id'], deal['guarantor_id']]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    sender = await db.get_user(sender_id)
    sender_name = sender['first_name'] or sender['username'] or f"ID{sender_id}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if sender_id == deal['seller_id']:
        role = "–ü—Ä–æ–¥–∞–≤–µ—Ü"
    elif sender_id == deal['buyer_id']:
        role = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
    elif sender_id == deal['guarantor_id']:
        role = "–ì–∞—Ä–∞–Ω—Ç"
    else:
        role = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    short_message = message_text[:50] + "..." if len(message_text) > 50 else message_text
    
    notification_text = f"""
üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å–¥–µ–ª–∫–∏ #{deal['id']}**

**–û—Ç:** {role} {sender_name}
**–°–æ–æ–±—â–µ–Ω–∏–µ:** {short_message}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–∞.
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"deal_chat_{deal['id']}")]
    ])
    
    for participant_id in participants:
        if participant_id and participant_id != sender_id:
            try:
                await bot.send_message(
                    chat_id=participant_id,
                    text=notification_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {participant_id}: {e}")

@router.callback_query(F.data.startswith("export_chat_"))
async def export_deal_chat(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –Ω–∞ pastebin"""
    deal_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    deal = await db.get_deal_by_id(deal_id)
    if not deal:
        await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç
    if user_id not in [deal.get('seller_id'), deal.get('buyer_id'), deal.get('guarantor_id')]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
        from config import OWNER_ID
        if user_id != OWNER_ID:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É —ç—Ç–æ–≥–æ —á–∞—Ç–∞", show_alert=True)
            return
    
    await callback.answer("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_data = await db.get_deal_chat_export_data(deal_id)
    
    if not export_data:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"deal_chat_{deal_id}")]
            ])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_text = await format_chat_export(export_data)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ pastebin
    pastebin_url = await upload_to_pastebin(export_text, f"Chat_Deal_{deal_id}")
    
    if pastebin_url:
        success_text = f"""
‚úÖ **–ß–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!**

**–°–¥–µ–ª–∫–∞:** #{deal_id}
**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** 
‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: {export_data['deal']['seller_name'] or export_data['deal']['seller_username'] or 'ID' + str(export_data['deal']['seller_id'])}
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {export_data['deal']['buyer_name'] or export_data['deal']['buyer_username'] or 'ID' + str(export_data['deal']['buyer_id']) if export_data['deal']['buyer_id'] else '–ù–µ—Ç'}

**–°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç:** {pastebin_url}

‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
"""
    else:
        success_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ pastebin. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await callback.message.edit_text(
        success_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —á–∞—Ç—É", callback_data=f"deal_chat_{deal_id}")]
        ]),
        parse_mode="Markdown"
    )

async def format_chat_export(export_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    deal = export_data['deal']
    messages = export_data['messages']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_messages = [m for m in messages if m['message_type'] == 'user']
    system_messages = [m for m in messages if m['message_type'] == 'system']
    
    # –ü–æ–¥—Å—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    participant_stats = {}
    for msg in user_messages:
        user_id = msg['user_id']
        if user_id not in participant_stats:
            participant_stats[user_id] = 0
        participant_stats[user_id] += 1
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    export_text = f"""‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                            –ß–ê–¢ –°–î–ï–õ–ö–ò #{deal['id']}                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–î–ï–õ–ö–ï:
    ‚Ä¢ –ö–æ–¥ —Å–¥–µ–ª–∫–∏: {deal['deal_code']}
    ‚Ä¢ –°—É–º–º–∞: {format_amount(deal['amount'], deal['currency_type'])}
    ‚Ä¢ –°—Ç–∞—Ç—É—Å: {deal['status'].upper()}
    ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {deal['created_at']}
    ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {deal['completed_at'] or '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}
    ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {deal.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üë• –£–ß–ê–°–¢–ù–ò–ö–ò –°–î–ï–õ–ö–ò:
    ‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: {deal['seller_name'] or deal['seller_username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {deal['seller_id']})
    ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {deal['buyer_name'] or deal['buyer_username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if deal['buyer_id'] else '–ù–µ—Ç'} {f"(ID: {deal['buyer_id']})" if deal['buyer_id'] else ''}
    ‚Ä¢ –ì–∞—Ä–∞–Ω—Ç: {deal['guarantor_name'] or deal['guarantor_username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if deal['guarantor_id'] else '–ù–µ—Ç'} {f"(ID: {deal['guarantor_id']})" if deal['guarantor_id'] else ''}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–ê:
    ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}
    ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {len(user_messages)}
    ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö: {len(system_messages)}
    ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∏—Å–∞–ª–æ: {len(participant_stats)}
"""

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    if participant_stats:
        export_text += "    ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:\n"
        for user_id, count in participant_stats.items():
            if user_id == deal['seller_id']:
                role = "–ü—Ä–æ–¥–∞–≤–µ—Ü"
                name = deal['seller_name'] or deal['seller_username'] or f"ID{user_id}"
            elif user_id == deal['buyer_id']:
                role = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
                name = deal['buyer_name'] or deal['buyer_username'] or f"ID{user_id}"
            elif user_id == deal['guarantor_id']:
                role = "–ì–∞—Ä–∞–Ω—Ç"
                name = deal['guarantor_name'] or deal['guarantor_username'] or f"ID{user_id}"
            else:
                role = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                name = f"ID{user_id}"
            export_text += f"      - {role} {name}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    export_text += "\n" + "="*80 + "\n"
    export_text += "                                  –°–û–û–ë–©–ï–ù–ò–Ø\n"
    export_text += "="*80 + "\n\n"
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    if not messages:
        export_text += "üìù –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –Ω–µ—Ç.\n"
    else:
        for i, msg in enumerate(messages, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if msg['message_type'] == 'system':
                sender = "ü§ñ –°–ò–°–¢–ï–ú–ê"
                sender_color = ""
            else:
                name = msg['first_name'] or msg['username'] or f"ID{msg['user_id']}"
                if msg['user_id'] == deal['seller_id']:
                    sender = f"üîπ {name} [–ü–†–û–î–ê–í–ï–¶]"
                elif msg['user_id'] == deal['buyer_id']:
                    sender = f"üî∏ {name} [–ü–û–ö–£–ü–ê–¢–ï–õ–¨]"
                elif msg['user_id'] == deal['guarantor_id']:
                    sender = f"üë®‚Äçüíº {name} [–ì–ê–†–ê–ù–¢]"
                else:
                    sender = f"‚ùì {name} [–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô]"
            
            timestamp = msg['created_at'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            message_text = msg['message_text']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            export_text += f"[{i:03d}] {timestamp}\n"
            export_text += f"     {sender}\n"
            export_text += f"     {'‚îÄ' * 60}\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = []
            words = message_text.split(' ')
            current_line = ""
            
            for word in words:
                if len(current_line + word) <= 70:
                    current_line += word + " "
                else:
                    lines.append(current_line.strip())
                    current_line = word + " "
            if current_line:
                lines.append(current_line.strip())
            
            for line in lines:
                export_text += f"     {line}\n"
            
            export_text += "\n"
    
    # –§—É—Ç–µ—Ä
    export_text += "="*80 + "\n"
    export_text += f"–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    export_text += f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: Garant Bot v1.0\n"
    export_text += f"–û–±—â–∞—è –¥–ª–∏–Ω–∞ —á–∞—Ç–∞: {len(export_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
    export_text += "="*80 + "\n"
    
    return export_text

async def upload_to_pastebin(text: str, title: str) -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ pastebin"""
    try:
        url = "https://pastebin.com/api/api_post.php"
        data = {
            'api_dev_key': '',  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API –∫–ª—é—á Pastebin
            'api_option': 'paste',
            'api_paste_code': text,
            'api_paste_name': title,
            'api_paste_expire_date': '1W',  # –ù–µ–¥–µ–ª—è
            'api_paste_private': '1',  # Unlisted
            'api_paste_format': 'text'
        }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é
        if not data['api_dev_key']:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å - dpaste.com
            alt_url = "https://dpaste.com/api/v2/"
            alt_data = {
                'content': text,
                'title': title,
                'syntax': 'text',
                'expiry_days': 7
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(alt_url, data=alt_data) as response:
                    if response.status == 201:
                        location = response.headers.get('Location')
                        if location:
                            return location + '.txt'  # –î–æ–±–∞–≤–ª—è–µ–º .txt –¥–ª—è raw view
            
            return None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á API pastebin
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                result = await response.text()
                if response.status == 200 and result.startswith('https://pastebin.com/'):
                    return result
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ pastebin: {result}")
                    return None
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ pastebin: {e}")
        return None

@router.callback_query(F.data.startswith("chat_show_all_"))
async def show_all_messages(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    deal_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    deal = await db.get_deal_by_id(deal_id)
    if not deal or user_id not in [deal.get('seller_id'), deal.get('buyer_id'), deal.get('guarantor_id')]:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = await db.get_deal_messages(deal_id, limit=1000)
    
    if not messages:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    chat_text = f"üí¨ **–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ #{deal_id}**\n"
    chat_text += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    for i, msg in enumerate(messages[:20], 1):
        if msg['message_type'] == 'system':
            sender = "ü§ñ –°–∏—Å—Ç–µ–º–∞"
        else:
            name = msg['first_name'] or msg['username'] or f"ID{msg['user_id']}"
            if msg['user_id'] == deal['seller_id']:
                sender = f"üîπ {name}"
            elif msg['user_id'] == deal['buyer_id']:
                sender = f"üî∏ {name}"
            elif msg['user_id'] == deal['guarantor_id']:
                sender = f"üë®‚Äçüíº {name}"
            else:
                sender = f"‚ùì {name}"
        
        time_str = msg['created_at'][:16] if msg['created_at'] else ""
        message_text = msg['message_text'][:80] + "..." if len(msg['message_text']) > 80 else msg['message_text']
        
        chat_text += f"`{time_str}` {sender}:\n{message_text}\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
        if len(chat_text) > 3500:
            remaining = len(messages) - i
            chat_text += f"... –∏ –µ—â—ë {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"
            break
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏", callback_data=f"export_chat_{deal_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —á–∞—Ç—É", callback_data=f"deal_chat_{deal_id}")]
    ])
    
    await callback.message.edit_text(
        chat_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("chat_older_"))
async def show_older_messages(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    deal_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    deal = await db.get_deal_by_id(deal_id)
    if not deal or user_id not in [deal.get('seller_id'), deal.get('buyer_id'), deal.get('guarantor_id')]:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)
    import aiosqlite
    async with aiosqlite.connect(db.db_path) as database:
        database.row_factory = aiosqlite.Row
        async with database.execute(
            '''SELECT dm.*, u.username, u.first_name 
               FROM deal_messages dm
               LEFT JOIN users u ON dm.user_id = u.user_id
               WHERE dm.deal_id = ?
               ORDER BY dm.created_at ASC
               LIMIT 20 OFFSET (
                   SELECT MAX(0, COUNT(*) - 35) 
                   FROM deal_messages 
                   WHERE deal_id = ?
               )''',
            (deal_id, deal_id)
        ) as cursor:
            older_messages = [dict(row) for row in await cursor.fetchall()]
    
    if not older_messages:
        await callback.answer("–°—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")
        return
    
    chat_text = f"üí¨ **–°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ #{deal_id}**\n"
    chat_text += f"üìù –ü–æ–∫–∞–∑–∞–Ω–æ: {len(older_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
    
    for msg in older_messages:
        if msg['message_type'] == 'system':
            sender = "ü§ñ –°–∏—Å—Ç–µ–º–∞"
        else:
            name = msg['first_name'] or msg['username'] or f"ID{msg['user_id']}"
            if msg['user_id'] == deal['seller_id']:
                sender = f"üîπ {name}"
            elif msg['user_id'] == deal['buyer_id']:
                sender = f"üî∏ {name}"
            elif msg['user_id'] == deal['guarantor_id']:
                sender = f"üë®‚Äçüíº {name}"
            else:
                sender = f"‚ùì {name}"
        
        time_str = msg['created_at'][:16] if msg['created_at'] else ""
        message_text = msg['message_text'][:100] + "..." if len(msg['message_text']) > 100 else msg['message_text']
        
        chat_text += f"`{time_str}` {sender}:\n{message_text}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"chat_show_all_{deal_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —á–∞—Ç—É", callback_data=f"deal_chat_{deal_id}")]
    ])
    
    await callback.message.edit_text(
        chat_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer() 