import asyncio
import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from config import OWNER_ID, DEFAULT_COMMISSION
from utils.messages import *
from utils.keyboards import *
from utils.validators import format_amount

logger = logging.getLogger(__name__)
router = Router()

class UserStates(StatesGroup):
    waiting_for_deal_code = State()
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_wallet_address = State()
    waiting_for_admin_user_id = State()
    waiting_for_balance_change = State()
    waiting_for_scammer_id = State()
    waiting_for_scammer_description = State()
    waiting_for_validation_id = State()

async def register_user(user_id: int, username: str = None, first_name: str = None) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(user_id)
    if not user:
        return await db.create_user(user_id, username, first_name)
    return True

async def check_user_access(user_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç (–∞–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç)
    if user_id != OWNER_ID and await db.is_maintenance_mode():
        return False, """
üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**

–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.
"""
    
    user = await db.get_user(user_id)
    if not user:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    if user.get('is_banned', False):
        return False, ERROR_USER_BANNED
    return True, ""

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(user_id, username, first_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    has_access, error_msg = await check_user_access(user_id)
    if not has_access:
        await message.answer(error_msg)
        return
    
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.clear()
    
    has_access, error_msg = await check_user_access(callback.from_user.id)
    if not has_access:
        await callback.message.edit_text(error_msg)
        return
    
    await callback.message.edit_text(
        MAIN_MENU_MESSAGE,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    wallets = await db.get_user_wallets(user_id)
    
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
        return
    
    profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {user['rating']} ‚≠ê
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {user['total_deals']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {user['completed_deals']}

üí∞ **–ë–∞–ª–∞–Ω—Å—ã:**
‚≠ê –ó–≤—ë–∑–¥—ã: {user['balance_stars']}
‚Çø –ö—Ä–∏–ø—Ç–∞: {user.get('balance_crypto', 0):.2f}
üí∞ –†—É–±–ª–∏: {user.get('balance_rub', 0):.2f}

üí≥ **–ö–æ—à–µ–ª—å–∫–∏:** {len(wallets)}
"""
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "support")
async def show_support(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    support_text = """
üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:

**–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:**
üí¨ Telegram: @Siriusatop123
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:00 - 22:00

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üö´ –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤: @scamnftalert

**–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É?
‚Ä¢ –ö–∞–∫ —Å—Ç–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º?
‚Ä¢ –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫?
‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞?

–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!
"""
    
    await callback.message.edit_text(
        support_text,
        reply_markup=get_back_to_main_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "deal_history")
async def show_deal_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    deals = await db.get_user_deals_history(user_id)
    
    if not deals:
        await callback.message.edit_text(
            "üìà **–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.",
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
    history_text = "üìà **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫:**\n\n"
    
    for deal in deals[:10]:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
        status_emoji = {
            'waiting_buyer': '‚è≥',
            'waiting_guarantor': 'üîç', 
            'in_progress': '‚ö°',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(deal['status'], '‚ùì')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if deal['seller_id'] == user_id:
            user_role = "–ü—Ä–æ–¥–∞–≤–µ—Ü"
            partner_name = deal['buyer_name'] or deal['buyer_username'] or f"ID{deal['buyer_id']}" if deal['buyer_id'] else "–ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
        elif deal['buyer_id'] == user_id:
            user_role = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
            partner_name = deal['seller_name'] or deal['seller_username'] or f"ID{deal['seller_id']}"
        elif deal['guarantor_id'] == user_id:
            user_role = "–ì–∞—Ä–∞–Ω—Ç"
            seller_name = deal['seller_name'] or deal['seller_username'] or f"ID{deal['seller_id']}"
            buyer_name = deal['buyer_name'] or deal['buyer_username'] or f"ID{deal['buyer_id']}" if deal['buyer_id'] else "–ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
            partner_name = f"{seller_name} ‚Üî {buyer_name}"
        else:
            user_role = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            partner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date = deal['created_at'][:10] if deal['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        history_text += f"{status_emoji} **–°–¥–µ–ª–∫–∞ #{deal['id']}** - {user_role}\n"
        history_text += f"üí∞ {format_amount(deal['amount'], deal['currency_type'])}\n"
        history_text += f"üë§ –ü–∞—Ä—Ç–Ω–µ—Ä: {partner_name}\n"
        history_text += f"üìÖ {date}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        if len(deal['description']) <= 30:
            history_text += f"üìù {deal['description']}\n"
        
        history_text += "\n"
    
    # –ï—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
    if len(deals) > 10:
        history_text += f"–ò –µ—â—ë {len(deals) - 10} —Å–¥–µ–ª–æ–∫...\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    completed_deals = len([d for d in deals if d['status'] == 'completed'])
    cancelled_deals = len([d for d in deals if d['status'] == 'cancelled'])
    
    history_text += f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    history_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_deals}\n"
    history_text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_deals}\n"
    history_text += f"üìä –í—Å–µ–≥–æ: {len(deals)}"
    
    await callback.message.edit_text(
        history_text,
        reply_markup=get_back_to_main_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "faq")
async def show_faq(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ FAQ"""
    faq_text = FAQ_MESSAGE.format(commission=DEFAULT_COMMISSION)
    
    await callback.message.edit_text(
        faq_text,
        reply_markup=get_back_to_main_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "my_deals")
async def show_my_deals(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü/–ø–æ–∫—É–ø–∞—Ç–µ–ª—å
    deal = await db.get_user_active_deal(user_id)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –≥–∞—Ä–∞–Ω—Ç
    if not deal:
        deal = await db.get_guarantor_active_deal(user_id)
    
    if not deal:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫",
            reply_markup=get_back_to_main_keyboard()
        )
        await callback.answer()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–¥–µ–ª–∫–µ
    if deal['seller_id'] == user_id:
        user_role = "seller"
    elif deal['buyer_id'] == user_id:
        user_role = "buyer"
    elif deal['guarantor_id'] == user_id:
        user_role = "guarantor"
    else:
        user_role = "unknown"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    seller = await db.get_user(deal['seller_id'])
    buyer = await db.get_user(deal['buyer_id']) if deal['buyer_id'] else None
    guarantor = await db.get_user(deal['guarantor_id']) if deal['guarantor_id'] else None
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    def format_rating(rating):
        stars = "‚≠ê" * int(rating)
        if rating != int(rating):
            stars += "‚ú®"  # –ü–æ–ª—É–∑–≤–µ–∑–¥–∞ –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        return f"{stars} ({rating:.1f})"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if deal['status'] == 'waiting_buyer':
        deal_text = f"""
üîÑ **–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è**

üî¢ **–ö–æ–¥ —Å–¥–µ–ª–∫–∏:** `{deal['deal_code']}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {deal['description']}
üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä **–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞:** {format_rating(seller.get('rating', 5.0))}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ.
"""
    
    elif deal['status'] == 'waiting_guarantor':
        deal_text = f"""
‚è≥ **–û–∂–∏–¥–∞–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞**

üî¢ **–ö–æ–¥ —Å–¥–µ–ª–∫–∏:** `{deal['deal_code']}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä **–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞:** {format_rating(seller.get('rating', 5.0))}
üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if buyer else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}

–ù–∞–∂–º–∏—Ç–µ "–ü–æ–∑–≤–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏.
"""
    
    elif deal['status'] == 'in_progress':
        if user_role == "guarantor":
            deal_text = f"""
‚ö° **–í—ã –≤–µ–¥–µ—Ç–µ —Å–¥–µ–ª–∫—É**

üî¢ **–ö–æ–¥ —Å–¥–µ–ª–∫–∏:** `{deal['deal_code']}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {deal['description']}
üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä **–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞:** {format_rating(seller.get('rating', 5.0))}
üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if buyer else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}

–ö–∞–∫ –≥–∞—Ä–∞–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ:
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É
‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É
üí¨ –û–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ
"""
        else:
            deal_text = f"""
‚ö° **–°–¥–µ–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ**

üî¢ **–ö–æ–¥ —Å–¥–µ–ª–∫–∏:** `{deal['deal_code']}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä **–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞:** {format_rating(seller.get('rating', 5.0))}
üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** {buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if buyer else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
üë®‚Äçüíº **–ì–∞—Ä–∞–Ω—Ç:** {guarantor['first_name'] or guarantor['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if guarantor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
{'üìä **–†–µ–π—Ç–∏–Ω–≥ –≥–∞—Ä–∞–Ω—Ç–∞:** ' + format_rating(guarantor.get('rating', 5.0)) if guarantor else ''}

–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≥–∞—Ä–∞–Ω—Ç–∞.
"""
    
    else:
        deal_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏"
    
    keyboard = await get_deal_actions_keyboard(deal['status'], user_role, deal['id'], user_id)
    await callback.message.edit_text(
        deal_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "scammers")
async def show_scammers_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–º–µ—Ä–æ–≤"""
    scammers = await db.get_all_scammers()
    
    if not scammers:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ ID", callback_data="validate_user_id")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            """üö´ **–°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤**

‚úÖ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤ –ø—É—Å—Ç.
–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫!

üì¢ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üîó –ö–∞–Ω–∞–ª —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: https://t.me/scamnftalert""",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    scammers_text = "üö´ **–°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤**\n\n‚ö†Ô∏è –≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ:\n\n"
    
    for i, scammer in enumerate(scammers[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        name = scammer['first_name'] or scammer['username'] or f"ID{scammer['user_id']}"
        date = scammer['created_at'][:10] if scammer['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        scammers_text += f"**{i}. {name}** (ID: `{scammer['user_id']}`)\n"
        scammers_text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {date}\n"
        scammers_text += f"üìù {scammer['description'][:100]}{'...' if len(scammer['description']) > 100 else ''}\n\n"
    
    if len(scammers) > 20:
        scammers_text += f"... –∏ –µ—â—ë {len(scammers) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    
    scammers_text += """‚ö†Ô∏è **–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!**

üì¢ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞–º–µ—Ä–∞—Ö:**
üîó –ö–∞–Ω–∞–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: https://t.me/scamnftalert"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ ID", callback_data="validate_user_id")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        scammers_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        ADMIN_PANEL_MESSAGE,
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id != OWNER_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        ADMIN_PANEL_MESSAGE,
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id != OWNER_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    stats = await db.get_stats()
    
    stats_text = ADMIN_STATS_MESSAGE.format(
        total_users=stats['total_users'],
        banned_users=stats['banned_users'],
        guarantors=stats['guarantors'],
        total_deals=stats['total_deals'],
        completed_deals=stats['completed_deals'],
        cancelled_deals=stats['cancelled_deals'],
        active_deals=stats['active_deals'],
        total_volume=f"{stats['total_volume']:,.2f}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command("logs"))
async def cmd_logs(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º")
        return
    
    logs = await db.get_logs(50)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
    
    if not logs:
        await message.answer("üìú –õ–æ–≥–∏ –ø—É—Å—Ç—ã")
        return
    
    logs_text = "üìú **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n\n"
    
    for log in logs[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        timestamp = log['timestamp'][:19]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        action = log['action']
        user_id = log['user_id'] or '–°–∏—Å—Ç–µ–º–∞'
        details = log['details'] or ''
        
        logs_text += f"`{timestamp}` - {action}\n"
        logs_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        if details:
            logs_text += f"–î–µ—Ç–∞–ª–∏: {details}\n"
        logs_text += "\n"
    
    if len(logs_text) > 4000:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        logs_text = logs_text[:4000] + "...\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logs –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    
    await message.answer(logs_text, parse_mode="Markdown")

@router.callback_query(F.data == "validate_user_id")
async def start_user_validation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    await state.set_state(UserStates.waiting_for_validation_id)
    
    await callback.message.edit_text(
        """üîç **–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å.

üí° **–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —Å–∫–∞–º–µ—Ä–∞
‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `123456789` ‚Üí –ø–æ–ª—É—á–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É
‚Ä¢ –ú–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–º–µ—Ä–æ–≤

–í–≤–µ–¥–∏—Ç–µ ID:""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="scammers")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(UserStates.waiting_for_validation_id)
async def process_user_validation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="scammers")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = await db.get_user(user_id)
    is_scammer = await db.is_scammer(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    validation_text = f"""üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏**

**ID:** `{user_id}`
"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user:
        name = user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        username = user.get('username')
        
        validation_text += f"**–ò–º—è:** {name}\n"
        
        if username:
            validation_text += f"**Username:** @{username}\n"
            validation_text += f"**–°—Å—ã–ª–∫–∞:** @{username}\n"
        else:
            validation_text += f"**Username:** –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            validation_text += f"**–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={user_id})\n"
            
        validation_text += f"**–°—Ç–∞—Ç—É—Å:** –ù–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞ ‚úÖ\n"
    else:
        validation_text += f"**–°—Ç–∞—Ç—É—Å:** –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞\n"
        validation_text += f"**–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={user_id})\n"
        validation_text += f"**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Telegram, –Ω–æ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º\n"
    
    # –°—Ç–∞—Ç—É—Å —Å–∫–∞–º–µ—Ä–∞
    validation_text += f"**–°–∫–∞–º–µ—Ä:** {'–î–∞ ‚ö†Ô∏è' if is_scammer else '–ù–µ—Ç ‚úÖ'}\n"
    
    validation_text += f"""
üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ç–æ, –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è  
3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ
4. {'–ë—É–¥—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã - —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–∫–∞–º–µ—Ä!' if is_scammer else '–°–æ–±–ª—é–¥–∞–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –ª—é–±—ã—Ö —Å–¥–µ–ª–∫–∞—Ö'}"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π ID", callback_data="validate_user_id")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–∫–∞–º–µ—Ä–æ–≤", callback_data="scammers")]
    ])
    
    await message.answer(
        validation_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.clear()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
async def auto_cleanup_deals():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
    while True:
        try:
            deleted_count = await db.delete_expired_deals()
            if deleted_count > 0:
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {deleted_count}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–¥–µ–ª–æ–∫: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(300) 