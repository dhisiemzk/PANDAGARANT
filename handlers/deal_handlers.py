import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from config import CURRENCY_TYPES, WALLET_TYPES, DEFAULT_COMMISSION
from utils.messages import *
from utils.keyboards import *
from utils.validators import generate_deal_code, is_valid_amount, format_amount
from handlers.main_handlers import check_user_access
from handlers.wallet_handlers import user_has_wallets, user_has_compatible_wallet

logger = logging.getLogger(__name__)
router = Router()

class DealStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()
    waiting_for_deal_code = State()

@router.callback_query(F.data == "create_deal")
async def start_create_deal(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    has_access, error_msg = await check_user_access(user_id)
    if not has_access:
        await callback.message.edit_text(error_msg)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–º–µ—Ä–æ–º
    if await db.is_scammer(user_id):
        scammer_info = await db.get_scammer_info(user_id)
        warning_text = f"""
üö´ **–î–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–¥–µ–ª–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–µ–Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

**–ü—Ä–∏—á–∏–Ω–∞:** {scammer_info['description'][:200]}{'...' if len(scammer_info['description']) > 200 else ''}

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
        await callback.message.edit_text(
            warning_text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏
    active_deal = await db.get_user_active_deal(user_id)
    if active_deal:
        await callback.message.edit_text(
            ERROR_ALREADY_HAVE_DEAL,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
    if not await user_has_wallets(user_id):
        await callback.message.edit_text(
            NO_WALLETS_MESSAGE,
            reply_markup=get_wallets_keyboard(has_wallets=False),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
    await callback.message.edit_text(
        CREATE_DEAL_SELECT_CURRENCY,
        reply_markup=get_currency_selection_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("currency_"))
async def select_currency(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è —Å–¥–µ–ª–∫–∏"""
    currency = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await user_has_compatible_wallet(user_id, currency):
        currency_name = CURRENCY_TYPES.get(currency, currency)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω—É–∂–Ω—ã
        required_wallets = {
            'rub': '–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É',
            'crypto': '–∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ (Bitcoin, USDT –∏–ª–∏ TON)',
            'stars': '–ª—é–±–æ–π –∫–æ—à–µ–ª—ë–∫'
        }
        
        wallet_needed = required_wallets.get(currency, '–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ—à–µ–ª—ë–∫')
        
        error_text = f"""
‚ùå **–ö–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –≤–∞–ª—é—Ç–µ **{currency_name}** –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å {wallet_needed}.

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ö–æ—à–µ–ª—å–∫–∏" –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞.
"""
        
        await callback.message.edit_text(
            error_text,
            reply_markup=get_wallets_keyboard(has_wallets=False),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    await state.update_data(currency_type=currency)
    await state.set_state(DealStates.waiting_for_amount)
    
    currency_name = CURRENCY_TYPES.get(currency, currency)
    
    await callback.message.edit_text(
        CREATE_DEAL_ENTER_AMOUNT.format(currency=currency_name),
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(DealStates.waiting_for_amount)
async def process_deal_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏"""
    amount_text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã
    is_valid, amount = is_valid_amount(amount_text)
    
    if not is_valid:
        await message.answer(
            ERROR_INVALID_AMOUNT,
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    await state.update_data(amount=amount)
    await state.set_state(DealStates.waiting_for_description)
    
    await message.answer(
        CREATE_DEAL_ENTER_DESCRIPTION,
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )

@router.message(DealStates.waiting_for_description)
async def process_deal_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    description = message.text.strip()
    
    if len(description) < 3:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(description) > 200:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    currency_type = data['currency_type']
    amount = data['amount']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–¥–µ–ª–∫–∏
    deal_code = generate_deal_code()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    while await db.get_deal_by_code(deal_code):
        deal_code = generate_deal_code()
    
    # –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
    user_id = message.from_user.id
    deal_id = await db.create_deal(
        seller_id=user_id,
        currency_type=currency_type,
        amount=amount,
        description=description,
        deal_code=deal_code
    )
    
    if deal_id:
        currency_name = CURRENCY_TYPES.get(currency_type, currency_type)
        formatted_amount = format_amount(amount, currency_type)
        
        success_text = DEAL_CREATED_MESSAGE.format(
            deal_code=deal_code,
            amount=formatted_amount,
            currency=currency_name,
            description=description
        )
        
        await message.answer(
            success_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        
        await state.clear()
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard()
        )

@router.callback_query(F.data == "join_deal")
async def start_join_deal(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    has_access, error_msg = await check_user_access(user_id)
    if not has_access:
        await callback.message.edit_text(error_msg)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–º–µ—Ä–æ–º
    if await db.is_scammer(user_id):
        scammer_info = await db.get_scammer_info(user_id)
        warning_text = f"""
üö´ **–î–æ—Å—Ç—É–ø –∫ —É—á–∞—Å—Ç–∏—é –≤ —Å–¥–µ–ª–∫–∞—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–µ–Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

**–ü—Ä–∏—á–∏–Ω–∞:** {scammer_info['description'][:200]}{'...' if len(scammer_info['description']) > 200 else ''}

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
        await callback.message.edit_text(
            warning_text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏
    active_deal = await db.get_user_active_deal(user_id)
    if active_deal:
        await callback.message.edit_text(
            ERROR_ALREADY_HAVE_DEAL,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    await state.set_state(DealStates.waiting_for_deal_code)
    
    await callback.message.edit_text(
        JOIN_DEAL_MESSAGE,
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(DealStates.waiting_for_deal_code)
async def process_deal_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    user_text = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–∞–º–µ—Ä–µ
    data = await state.get_data()
    if data.get('scammer_warning_shown'):
        if user_text == "–°–û–ì–õ–ê–°–ï–ù":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –≤ —Å–¥–µ–ª–∫–µ —Å–æ —Å–∫–∞–º–µ—Ä–æ–º
            deal_code = data['deal_code']
            
            # –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
            await db.log_action(
                'scammer_deal_join_confirmed', 
                user_id, 
                details=f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ —Å–∫–∞–º–µ—Ä–∞: {deal_code}'
            )
            
            await message.answer(
                "‚ö†Ô∏è –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Å–¥–µ–ª–∫–µ —Å –Ω–µ–Ω–∞–¥—ë–∂–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ë—É–¥—å—Ç–µ –∫—Ä–∞–π–Ω–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!",
                parse_mode="Markdown"
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
            await state.update_data(scammer_warning_shown=False)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏ —Å–æ —Å–∫–∞–º–µ—Ä–æ–º
            await message.answer(
                "‚úÖ –†–∞–∑—É–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
            await state.clear()
            return
    else:
        deal_code = user_text.upper()
    
    # –ò—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ –∫–æ–¥—É
    deal = await db.get_deal_by_code(deal_code)
    
    if not deal:
        await message.answer(
            ERROR_DEAL_NOT_FOUND,
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞
    if deal['seller_id'] == user_id:
        await message.answer(
            ERROR_CANT_JOIN_OWN_DEAL,
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    if deal['status'] not in ['waiting_buyer']:
        if deal['status'] == 'completed':
            await message.answer(
                "‚ùå **–°–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n–≠—Ç–∞ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_cancel_keyboard(),
                parse_mode="Markdown"
            )
        elif deal['status'] == 'cancelled':
            await message.answer(
                "‚ùå **–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n–≠—Ç–∞ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=get_cancel_keyboard(),
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "‚ùå **–°–¥–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–ö —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.",
                reply_markup=get_cancel_keyboard(),
                parse_mode="Markdown"
            )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫ —Å–¥–µ–ª–∫–µ –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
    if deal['buyer_id'] is not None:
        await message.answer(
            ERROR_DEAL_ALREADY_HAS_BUYER,
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —Å–∫–∞–º–µ—Ä–æ–º
    if await db.is_scammer(deal['seller_id']):
        scammer_info = await db.get_scammer_info(deal['seller_id'])
        seller = await db.get_user(deal['seller_id'])
        seller_name = seller['first_name'] or seller['username'] or f"ID{deal['seller_id']}"
        
        warning_text = f"""
‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –í–û–ó–ú–û–ñ–ù–´–ô –°–ö–ê–ú–ï–†**

–ü—Ä–æ–¥–∞–≤–µ—Ü **{seller_name}** –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–µ–Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!

**–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:**
{scammer_info['description'][:300]}{'...' if len(scammer_info['description']) > 300 else ''}

üö´ **–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø** —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ!

–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ "–°–û–ì–õ–ê–°–ï–ù" (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏).
–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.
"""
        
        await message.answer(
            warning_text,
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            deal_code=deal_code,
            scammer_warning_shown=True
        )
        return
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–¥–µ–ª–∫–µ
    success = await db.join_deal(deal_code, user_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
        updated_deal = await db.get_deal_by_code(deal_code)
        seller = await db.get_user(updated_deal['seller_id'])
        buyer = await db.get_user(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        buyer_name = buyer['first_name'] or buyer['username'] or f"ID{user_id}"
        system_message = f"üî∏ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {buyer_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ"
        await db.add_deal_message(updated_deal['id'], user_id, system_message, 'system')
        
        formatted_amount = format_amount(updated_deal['amount'], updated_deal['currency_type'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        seller_rating = seller.get('rating', 5.0)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        def format_rating(rating):
            stars = "‚≠ê" * int(rating)
            if rating != int(rating):
                stars += "‚ú®"  # –ü–æ–ª—É–∑–≤–µ–∑–¥–∞ –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            return f"{stars} ({rating:.1f})"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        buyer_text = DEAL_JOINED_MESSAGE.format(
            deal_code=deal_code,
            amount=formatted_amount,
            seller_name=seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            buyer_name=buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        )
        buyer_text += f"\n\nüìä **–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞:** {format_rating(seller_rating)}"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞)
        seller_text = DEAL_JOINED_MESSAGE.format(
            deal_code=deal_code,
            amount=formatted_amount,
            seller_name=seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            buyer_name=buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        await message.answer(
            buyer_text,
            reply_markup=get_deal_actions_keyboard_sync("waiting_guarantor", "buyer", updated_deal['id']),
            parse_mode="Markdown"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        try:
            bot = message.bot
            await bot.send_message(
                chat_id=updated_deal['seller_id'],
                text=seller_text,
                reply_markup=get_deal_actions_keyboard_sync("waiting_guarantor", "seller", updated_deal['id']),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
        
        await state.clear()
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–¥–µ–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard()
        )

@router.callback_query(F.data == "call_guarantor")
async def call_guarantor(callback: CallbackQuery):
    """–í—ã–∑–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deal = await db.get_user_active_deal(user_id)
    
    if not deal or deal['status'] != 'waiting_guarantor':
        await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç –µ—â–µ –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    if deal.get('is_guarantor_called', False):
        await callback.answer("–ì–∞—Ä–∞–Ω—Ç —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏", show_alert=True)
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç –≤—ã–∑–≤–∞–Ω
    await db.mark_guarantor_called(deal['id'])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤
    guarantors = await db.get_all_users()
    guarantors = [g for g in guarantors if g.get('is_guarantor', False) and not g.get('is_banned', False)]
    
    if not guarantors:
        await callback.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    seller = await db.get_user(deal['seller_id'])
    buyer = await db.get_user(deal['buyer_id'])
    
    formatted_amount = format_amount(deal['amount'], deal['currency_type'])
    
    notification_text = GUARANTOR_NOTIFICATION.format(
        deal_id=deal['id'],
        deal_code=deal['deal_code'],
        amount=formatted_amount,
        seller_name=seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        buyer_name=buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        description=deal['description']
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –≥–∞—Ä–∞–Ω—Ç–∞–º
    bot = callback.bot
    notified_count = 0
    
    for guarantor in guarantors:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –≥–∞—Ä–∞–Ω—Ç –¥—Ä—É–≥–æ–π —Å–¥–µ–ª–∫–æ–π
        guarantor_deal = await db.get_guarantor_active_deal(guarantor['user_id'])
        if guarantor_deal:
            continue
        
        try:
            await bot.send_message(
                chat_id=guarantor['user_id'],
                text=notification_text,
                reply_markup=get_guarantor_response_keyboard(deal['id']),
                parse_mode="Markdown"
            )
            notified_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∞ {guarantor['user_id']}: {e}")
    
    if notified_count > 0:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
        called_text = GUARANTOR_CALLED_MESSAGE.format(
            deal_id=deal['id'],
            deal_code=deal['deal_code'],
            amount=formatted_amount,
            seller_name=seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            buyer_name=buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        )
        
        await callback.message.edit_text(
            called_text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        other_user_id = deal['buyer_id'] if user_id == deal['seller_id'] else deal['seller_id']
        try:
            await bot.send_message(
                chat_id=other_user_id,
                text=called_text,
                reply_markup=get_back_to_main_keyboard(),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏: {e}")
        
        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ –≥–∞—Ä–∞–Ω—Ç–æ–≤: {notified_count}")
    else:
        # –£–±–∏—Ä–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –µ—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ —É–≤–µ–¥–æ–º–∏–ª–∏
        await db.mark_guarantor_called(deal['id'], False)
        await callback.answer("–í—Å–µ –≥–∞—Ä–∞–Ω—Ç—ã –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("accept_deal_"))
async def accept_deal_as_guarantor(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–¥–µ–ª–∫–∏ –≥–∞—Ä–∞–Ω—Ç–æ–º"""
    deal_id = int(callback.data.split("_")[-1])
    guarantor_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º
    guarantor = await db.get_user(guarantor_id)
    if not guarantor or not guarantor.get('is_guarantor', False):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≥–∞—Ä–∞–Ω—Ç–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –≥–∞—Ä–∞–Ω—Ç –¥—Ä—É–≥–æ–π —Å–¥–µ–ª–∫–æ–π
    active_deal = await db.get_guarantor_active_deal(guarantor_id)
    if active_deal:
        await callback.message.edit_text(
            ERROR_GUARANTOR_BUSY,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–∞—Ä–∞–Ω—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    success = await db.assign_guarantor(deal_id, guarantor_id)
    
    if success:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∞
        guarantor_name = guarantor['first_name'] or guarantor['username'] or f"ID{guarantor_id}"
        system_message = f"üë®‚Äçüíº –ì–∞—Ä–∞–Ω—Ç {guarantor_name} –ø—Ä–∏–Ω—è–ª —Å–¥–µ–ª–∫—É. –°–¥–µ–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!"
        await db.add_deal_message(deal_id, guarantor_id, system_message, 'system')
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
        deal = await db.get_deal_by_code("")  # –ü–æ–ª—É—á–∞–µ–º –ø–æ ID
        # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫—É –ø–æ ID (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        all_deals = await db.get_all_deals()
        deal = next((d for d in all_deals if d['id'] == deal_id), None)
        
        if deal:
            seller = await db.get_user(deal['seller_id'])
            buyer = await db.get_user(deal['buyer_id'])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ—à–µ–ª—ë–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –≤–∞–ª—é—Ç—ã —Å–¥–µ–ª–∫–∏
            if deal['currency_type'] == 'stars':
                # –î–ª—è –∑–≤—ë–∑–¥ Telegram –∫–æ—à–µ–ª—ë–∫ –Ω–µ –Ω—É–∂–µ–Ω - –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                wallet_info = '–ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (—Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –≥–∞—Ä–∞–Ω—Ç–∞)'
            else:
                seller_wallets = await db.get_user_wallets(deal['seller_id'])
                if seller_wallets:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –≤–∞–ª—é—Ç—ã —Å–¥–µ–ª–∫–∏
                    compatible_wallets = {
                        'rub': ['card'],  # –†—É–±–ª–∏ - –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
                        'crypto': ['btc', 'usdt', 'ton'],  # –ö—Ä–∏–ø—Ç–∞ - –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫
                    }
                    
                    required_wallet_types = compatible_wallets.get(deal['currency_type'], [])
                    
                    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ—à–µ–ª–µ–∫
                    compatible_wallet = None
                    for wallet in seller_wallets:
                        if wallet['wallet_type'] in required_wallet_types:
                            compatible_wallet = wallet
                            break
                    
                    if compatible_wallet:
                        wallet_type_name = WALLET_TYPES.get(compatible_wallet['wallet_type'], compatible_wallet['wallet_type'])
                        wallet_address = compatible_wallet['wallet_address']
                        wallet_info = f"{wallet_type_name} - `{wallet_address}`"
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ–º–µ—á–∞–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                        wallet = seller_wallets[0]
                        wallet_type_name = WALLET_TYPES.get(wallet['wallet_type'], wallet['wallet_type'])
                        wallet_address = wallet['wallet_address']
                        wallet_info = f"‚ö†Ô∏è {wallet_type_name} - `{wallet_address}` (–º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è {CURRENCY_TYPES.get(deal['currency_type'])})"
                else:
                    wallet_info = '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            formatted_amount = format_amount(deal['amount'], deal['currency_type'])
            
            progress_text = DEAL_IN_PROGRESS_MESSAGE.format(
                deal_code=deal['deal_code'],
                amount=formatted_amount,
                seller_name=seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                buyer_name=buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                guarantor_name=guarantor['first_name'] or guarantor['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                wallet_info=wallet_info,
                commission=DEFAULT_COMMISSION
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∞
            await callback.message.edit_text(
                progress_text,
                reply_markup=get_deal_actions_keyboard_sync("in_progress", "guarantor", deal_id),
                parse_mode="Markdown"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
            bot = callback.bot
            for user_id in [deal['seller_id'], deal['buyer_id']]:
                user_role = "seller" if user_id == deal['seller_id'] else "buyer"
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=progress_text,
                        reply_markup=get_deal_actions_keyboard_sync("in_progress", user_role, deal_id),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏: {e}")
            
            await callback.answer("–°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ", show_alert=True)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–¥–µ–ª–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("decline_deal_"))
async def decline_deal_as_guarantor(callback: CallbackQuery):
    """–û—Ç–∫–∞–∑ –æ—Ç —Å–¥–µ–ª–∫–∏ –≥–∞—Ä–∞–Ω—Ç–æ–º"""
    await callback.message.delete()
    await callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏")

@router.callback_query(F.data == "complete_deal")
async def complete_deal(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≥–∞—Ä–∞–Ω—Ç–æ–º"""
    guarantor_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É –≥–∞—Ä–∞–Ω—Ç–∞
    deal = await db.get_guarantor_active_deal(guarantor_id)
    
    if not deal:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", show_alert=True)
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫—É
    success = await db.complete_deal(deal['id'], guarantor_id)
    
    if success:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        guarantor = await db.get_user(guarantor_id)
        guarantor_name = guarantor['first_name'] or guarantor['username'] or f"ID{guarantor_id}"
        system_message = f"‚úÖ –ì–∞—Ä–∞–Ω—Ç {guarantor_name} –∑–∞–≤–µ—Ä—à–∏–ª —Å–¥–µ–ª–∫—É. –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
        await db.add_deal_message(deal['id'], guarantor_id, system_message, 'system')
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        completion_text = DEAL_COMPLETED_MESSAGE
        
        await callback.message.edit_text(
            completion_text,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
        bot = callback.bot
        for user_id in [deal['seller_id'], deal['buyer_id']]:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=completion_text,
                    reply_markup=get_rating_keyboard(),  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏: {e}")
        
        await callback.answer("–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏", show_alert=True)

@router.callback_query(F.data == "cancel_deal")
async def cancel_deal(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –≥–∞—Ä–∞–Ω—Ç–∞)
    deal = await db.get_user_active_deal(user_id)
    if not deal:
        deal = await db.get_guarantor_active_deal(user_id)
    
    if not deal:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", show_alert=True)
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É
    success = await db.cancel_deal(deal['id'], user_id)
    
    if success:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        user = await db.get_user(user_id)
        user_name = user['first_name'] or user['username'] or f"ID{user_id}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–º–µ–Ω–∏–≤—à–µ–≥–æ
        if deal['seller_id'] == user_id:
            role = "–ü—Ä–æ–¥–∞–≤–µ—Ü"
        elif deal['buyer_id'] == user_id:
            role = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
        elif deal['guarantor_id'] == user_id:
            role = "–ì–∞—Ä–∞–Ω—Ç"
        else:
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        system_message = f"‚ùå {role} {user_name} –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É"
        await db.add_deal_message(deal['id'], user_id, system_message, 'system')
        await callback.message.edit_text(
            DEAL_CANCELLED_MESSAGE,
            reply_markup=get_back_to_main_keyboard(),
            parse_mode="Markdown"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        bot = callback.bot
        users_to_notify = []
        
        if deal['seller_id'] and deal['seller_id'] != user_id:
            users_to_notify.append(deal['seller_id'])
        if deal['buyer_id'] and deal['buyer_id'] != user_id:
            users_to_notify.append(deal['buyer_id'])
        if deal['guarantor_id'] and deal['guarantor_id'] != user_id:
            users_to_notify.append(deal['guarantor_id'])
        
        for notify_user_id in users_to_notify:
            try:
                await bot.send_message(
                    chat_id=notify_user_id,
                    text=DEAL_CANCELLED_MESSAGE,
                    reply_markup=get_back_to_main_keyboard(),
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –æ—Ç–º–µ–Ω–µ: {e}")
        
        await callback.answer("–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏", show_alert=True) 