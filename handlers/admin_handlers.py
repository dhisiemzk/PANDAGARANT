import logging
import aiosqlite
import aiohttp
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
from datetime import datetime

from database import db
from config import OWNER_ID
from utils.messages import *
from utils.keyboards import *
from utils.validators import format_amount
from handlers.chat_handlers import format_chat_export, upload_to_pastebin

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEAL_COMPLETED_MESSAGE = "‚úÖ **–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
DEAL_CANCELLED_MESSAGE = "‚ùå **–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."

logger = logging.getLogger(__name__)
router = Router()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_balance_amount = State()
    waiting_for_guarantor_id = State()
    waiting_for_broadcast_message = State()
    waiting_for_search_term = State()
    waiting_for_balance_currency = State()
    waiting_for_scammer_id = State()
    waiting_for_scammer_description = State()
    waiting_for_remove_scammer_id = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == OWNER_ID

@router.callback_query(F.data == "admin_users")
async def show_admin_users_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_users_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_find_user")
async def start_find_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_user_id)
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_user_id)
async def process_find_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_admin_users_keyboard()
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    wallets = await db.get_user_wallets(user_id)
    active_deal = await db.get_user_active_deal(user_id)
    
    user_info = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

**ID:** `{user['user_id']}`
**Username:** @{user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
**–ò–º—è:** {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
**–†–µ–π—Ç–∏–Ω–≥:** {user['rating']} ‚≠ê
**–°–¥–µ–ª–æ–∫:** {user['total_deals']} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {user['completed_deals']})

**–ë–∞–ª–∞–Ω—Å—ã:**
‚≠ê –ó–≤—ë–∑–¥—ã: {user['balance_stars']}
‚Çø –ö—Ä–∏–ø—Ç–∞: {user.get('balance_crypto', 0):.2f}
üí∞ –†—É–±–ª–∏: {user.get('balance_rub', 0):.2f}

**–ö–æ—à–µ–ª—å–∫–æ–≤:** {len(wallets)}
**–°—Ç–∞—Ç—É—Å:** {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user['is_banned'] else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}
**–ì–∞—Ä–∞–Ω—Ç:** {'‚úÖ –î–∞' if user['is_guarantor'] else '‚ùå –ù–µ—Ç'}
**–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞:** {'‚úÖ –ï—Å—Ç—å' if active_deal else '‚ùå –ù–µ—Ç'}
**–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {user['created_at'][:10]}
"""
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not user['is_banned'] else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"admin_toggle_ban_{user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º" if not user['is_guarantor'] else "‚ùå –£–±—Ä–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞",
                callback_data=f"admin_toggle_guarantor_{user_id}"
            )
        ],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_balance_{user_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])
    
    await message.answer(
        user_info,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.clear()

@router.callback_query(F.data.startswith("admin_toggle_ban_"))
async def toggle_user_ban(callback: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[-1])
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    new_ban_status = not user['is_banned']
    await db.ban_user(user_id, new_ban_status)
    
    action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_ban_status else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await process_find_user_by_callback(callback, user_id)

@router.callback_query(F.data.startswith("admin_toggle_guarantor_"))
async def toggle_user_guarantor(callback: CallbackQuery):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[-1])
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    new_guarantor_status = not user['is_guarantor']
    await db.set_guarantor(user_id, new_guarantor_status)
    
    action = "–Ω–∞–∑–Ω–∞—á–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º" if new_guarantor_status else "—Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∞"
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await process_find_user_by_callback(callback, user_id)

@router.callback_query(F.data.startswith("admin_balance_"))
async def start_change_balance(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ - –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(target_user_id=user_id)
    await state.set_state(AdminStates.waiting_for_balance_currency)
    
    user = await db.get_user(user_id)
    
    balance_text = f"""
üí∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user['first_name'] or user['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

**–¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:**
‚≠ê –ó–≤—ë–∑–¥—ã: {user['balance_stars']}
‚Çø –ö—Ä–∏–ø—Ç–∞: {user.get('balance_crypto', 0):.2f}
üí∞ –†—É–±–ª–∏: {user.get('balance_rub', 0):.2f}

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê –ó–≤—ë–∑–¥—ã", callback_data="balance_currency_stars")],
        [InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–∞", callback_data="balance_currency_crypto")],
        [InlineKeyboardButton(text="üí∞ –†—É–±–ª–∏", callback_data="balance_currency_rub")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]
    ])
    
    await callback.message.edit_text(
        balance_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("balance_currency_"))
async def select_balance_currency(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    currency = callback.data.split("_")[-1]
    await state.update_data(currency=currency)
    await state.set_state(AdminStates.waiting_for_balance_amount)
    
    data = await state.get_data()
    user_id = data['target_user_id']
    user = await db.get_user(user_id)
    
    currency_names = {
        'stars': '–∑–≤—ë–∑–¥—ã',
        'crypto': '–∫—Ä–∏–ø—Ç–∞',
        'rub': '—Ä—É–±–ª–∏'
    }
    
    currency_symbols = {
        'stars': '‚≠ê',
        'crypto': '‚Çø',
        'rub': 'üí∞'
    }
    
    current_balance = user.get(f'balance_{currency}', 0)
    
    await callback.message.edit_text(
        f"üí∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['first_name'] or user['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"–í–∞–ª—é—Ç–∞: {currency_symbols[currency]} {currency_names[currency]}\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} {currency_symbols[currency]}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: +100, -50):",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_balance_amount)
async def process_balance_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    data = await state.get_data()
    target_user_id = data['target_user_id']
    currency = data['currency']
    
    try:
        if currency == 'stars':
            amount = int(message.text.strip())
        else:
            amount = float(message.text.strip())
    except ValueError:
        example = "+100, -50" if currency == 'stars' else "+100.50, -25.25"
        await message.answer(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: {example}):",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await db.update_user_balance(target_user_id, amount, currency)
    
    user = await db.get_user(target_user_id)
    
    currency_symbols = {
        'stars': '‚≠ê',
        'crypto': '‚Çø',
        'rub': 'üí∞'
    }
    
    currency_names = {
        'stars': '–∑–≤—ë–∑–¥—ã',
        'crypto': '–∫—Ä–∏–ø—Ç–∞',
        'rub': '—Ä—É–±–ª–∏'
    }
    
    symbol = currency_symbols[currency]
    new_balance = user.get(f'balance_{currency}', 0)
    
    if currency == 'stars':
        amount_str = f"{amount:+d}"
        balance_str = f"{new_balance}"
    else:
        amount_str = f"{amount:+.2f}"
        balance_str = f"{new_balance:.2f}"
    
    await message.answer(
        f"‚úÖ **–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['first_name'] or user['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"–í–∞–ª—é—Ç–∞: {currency_names[currency]}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount_str} {symbol}\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance_str} {symbol}",
        reply_markup=get_admin_users_keyboard(),
        parse_mode="Markdown"
    )
    await state.clear()

async def process_find_user_by_callback(callback: CallbackQuery, user_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = await db.get_user(user_id)
    wallets = await db.get_user_wallets(user_id)
    active_deal = await db.get_user_active_deal(user_id)
    
    user_info = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

**ID:** `{user['user_id']}`
**Username:** @{user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
**–ò–º—è:** {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
**–†–µ–π—Ç–∏–Ω–≥:** {user['rating']} ‚≠ê
**–°–¥–µ–ª–æ–∫:** {user['total_deals']} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {user['completed_deals']})

**–ë–∞–ª–∞–Ω—Å—ã:**
‚≠ê –ó–≤—ë–∑–¥—ã: {user['balance_stars']}
‚Çø –ö—Ä–∏–ø—Ç–∞: {user.get('balance_crypto', 0):.2f}
üí∞ –†—É–±–ª–∏: {user.get('balance_rub', 0):.2f}

**–ö–æ—à–µ–ª—å–∫–æ–≤:** {len(wallets)}
**–°—Ç–∞—Ç—É—Å:** {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user['is_banned'] else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}
**–ì–∞—Ä–∞–Ω—Ç:** {'‚úÖ –î–∞' if user['is_guarantor'] else '‚ùå –ù–µ—Ç'}
**–ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞:** {'‚úÖ –ï—Å—Ç—å' if active_deal else '‚ùå –ù–µ—Ç'}
**–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {user['created_at'][:10]}
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not user['is_banned'] else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"admin_toggle_ban_{user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–¥–µ–ª–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º" if not user['is_guarantor'] else "‚ùå –£–±—Ä–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞",
                callback_data=f"admin_toggle_guarantor_{user_id}"
            )
        ],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_balance_{user_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])
    
    await callback.message.edit_text(
        user_info,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "admin_guarantors")
async def show_admin_guarantors_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë®‚Äçüíº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_guarantors_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_list_guarantors")
async def list_guarantors(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    users = await db.get_all_users()
    guarantors = [u for u in users if u.get('is_guarantor', False)]
    
    if not guarantors:
        guarantors_text = "üë®‚Äçüíº **–°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤**\n\n–ì–∞—Ä–∞–Ω—Ç–æ–≤ –Ω–µ—Ç."
    else:
        guarantors_text = "üë®‚Äçüíº **–°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤:**\n\n"
        
        for i, guarantor in enumerate(guarantors, 1):
            status = "üü¢" if not guarantor.get('is_banned', False) else "üî¥"
            name = guarantor['first_name'] or guarantor['username'] or f"ID{guarantor['user_id']}"
            
            guarantors_text += f"{i}. {status} {name} (`{guarantor['user_id']}`)\n"
            guarantors_text += f"   –†–µ–π—Ç–∏–Ω–≥: {guarantor['rating']} ‚≠ê\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_guarantors")]
    ])
    
    await callback.message.edit_text(
        guarantors_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_deals")
async def show_all_deals(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    deals = await db.get_all_deals()
    
    if not deals:
        deals_text = "üíº **–í—Å–µ —Å–¥–µ–ª–∫–∏**\n\n–°–¥–µ–ª–æ–∫ –Ω–µ—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    else:
        deals_text = "üíº **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
        keyboard_buttons = []
        
        for deal in deals[:10]:
            status_emoji = {
                'waiting_buyer': '‚è≥',
                'waiting_guarantor': 'üîç',
                'in_progress': '‚ö°',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(deal['status'], '‚ùì')
            
            deals_text += f"{status_emoji} **–°–¥–µ–ª–∫–∞ #{deal['id']}**\n"
            deals_text += f"–ö–æ–¥: `{deal['deal_code']}`\n"
            deals_text += f"–°—É–º–º–∞: {deal['amount']} {deal['currency_type']}\n"
            deals_text += f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {deal['seller_name'] or 'ID' + str(deal['seller_id'])}\n"
            
            if deal['buyer_id']:
                deals_text += f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {deal['buyer_name'] or 'ID' + str(deal['buyer_id'])}\n"
            
            if deal['guarantor_id']:
                deals_text += f"–ì–∞—Ä–∞–Ω—Ç: {deal['guarantor_name'] or 'ID' + str(deal['guarantor_id'])}\n"
            
            deals_text += f"–°–æ–∑–¥–∞–Ω–∞: {deal['created_at'][:10]}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏
            if deal['buyer_id'] or deal['guarantor_id']:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üí¨ –ß–∞—Ç #{deal['id']} ({deal['deal_code']})",
                        callback_data=f"admin_view_chat_{deal['id']}"
                    )
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        deals_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_logs")
async def show_admin_logs(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    logs = await db.get_logs(20)
    
    if not logs:
        logs_text = "üìú **–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n–õ–æ–≥–æ–≤ –Ω–µ—Ç."
    else:
        logs_text = "üìú **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n\n"
        
        for log in logs:
            timestamp = log['timestamp'][:16]  # –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
            action = str(log['action']).replace('_', ' ').title()
            user_id = log['user_id'] or '–°–∏—Å—Ç–µ–º–∞'
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è markdown
            action = action.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
            details = str(log['details'] or '').replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
            
            logs_text += f"`{timestamp}` {action}\n"
            logs_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            
            if details:
                logs_text += f"–î–µ—Ç–∞–ª–∏: {details}\n"
            
            logs_text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(
        logs_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    
    await callback.message.edit_text(
        "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    broadcast_text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if not broadcast_text or broadcast_text.strip() == "":
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(broadcast_text) > 4000:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_all_users()
    active_users = [u for u in users if not u.get('is_banned', False)]
    
    await message.answer("üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    success_count = 0
    error_count = 0
    
    for user in active_users:
        try:
            await message.bot.send_message(
                chat_id=user['user_id'],
                text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{broadcast_text}",
                parse_mode="Markdown"
            )
            success_count += 1
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
    
    result_text = f"""
‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}
‚Ä¢ –û—à–∏–±–æ–∫: {error_count}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}
"""
    
    await message.answer(
        result_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.clear()
    await db.log_action('broadcast_sent', message.from_user.id, details=f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {error_count}')

@router.callback_query(F.data == "admin_banned_users")
async def show_banned_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    users = await db.get_all_users()
    banned_users = [u for u in users if u.get('is_banned', False)]
    
    if not banned_users:
        banned_text = "üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."
    else:
        banned_text = "üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
        
        for i, user in enumerate(banned_users, 1):
            name = user['first_name'] or user['username'] or f"ID{user['user_id']}"
            banned_text += f"{i}. {name} (`{user['user_id']}`)\n"
            banned_text += f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {user['created_at'][:10]}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])
    
    await callback.message.edit_text(
        banned_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_change_balance")
async def admin_change_balance_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await start_find_user(callback, state)

@router.callback_query(F.data == "admin_settings")
async def show_admin_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    maintenance_mode = await db.is_maintenance_mode()
    maintenance_status = "üîß –í–∫–ª—é—á–µ–Ω—ã" if maintenance_mode else "‚úÖ –í—ã–∫–ª—é—á–µ–Ω—ã"
    
    settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**

**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —Å–¥–µ–ª–∫–∏: 5.0%
‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–¥–µ–ª–∫–∏: 10 –º–∏–Ω—É—Ç
‚Ä¢ –ú–∏–Ω–∏–º—É–º –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞: 3
‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 5.0 ‚≠ê

**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã: {maintenance_status}
‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∞–º: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã

*–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª–µ config.py*
"""
    
    maintenance_button_text = "üîß –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã" if not maintenance_mode else "‚úÖ –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=maintenance_button_text, callback_data="admin_toggle_maintenance")],
        [InlineKeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ", callback_data="admin_cleanup_deals")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_clear_logs")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_toggle_maintenance")
async def toggle_maintenance_mode(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    current_mode = await db.is_maintenance_mode()
    new_mode = not current_mode
    
    await db.set_setting('maintenance_mode', 'true' if new_mode else 'false')
    
    status_text = "–≤–∫–ª—é—á—ë–Ω" if new_mode else "–æ—Ç–∫–ª—é—á—ë–Ω"
    await callback.answer(f"üîß –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç {status_text}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await show_admin_settings(callback)

@router.callback_query(F.data == "admin_cleanup_deals")
async def admin_cleanup_deals(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    deleted_count = await db.delete_expired_deals()
    
    await callback.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {deleted_count}", show_alert=True)

@router.callback_query(F.data == "admin_clear_logs")
async def admin_clear_logs(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_confirm_clear_logs"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ª–æ–≥–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_confirm_clear_logs")
async def admin_confirm_clear_logs(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
    async with aiosqlite.connect(db.db_path) as database:
        await database.execute('DELETE FROM logs')
        await database.commit()
    
    await db.log_action('logs_cleared', callback.from_user.id)
    
    await callback.answer("üóë –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await show_admin_settings(callback)

@router.callback_query(F.data == "admin_add_guarantor")
async def admin_add_guarantor_menu(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_guarantor_id)
    await state.update_data(action="add_guarantor")
    
    await callback.message.edit_text(
        "üë®‚Äçüíº **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞**\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–æ–º:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_remove_guarantor")
async def admin_remove_guarantor_menu(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_guarantor_id)
    await state.update_data(action="remove_guarantor")
    
    await callback.message.edit_text(
        "üë®‚Äçüíº **–£–¥–∞–ª–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞**\n\n–í–≤–µ–¥–∏—Ç–µ ID –≥–∞—Ä–∞–Ω—Ç–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_guarantor_id)
async def process_guarantor_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–∞—Ä–∞–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    user = await db.get_user(user_id)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_admin_guarantors_keyboard()
        )
        await state.clear()
        return
    
    data = await state.get_data()
    action = data.get('action')
    
    if action == "add_guarantor":
        if user.get('is_guarantor', False):
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name'] or user['username'] or user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º",
                reply_markup=get_admin_guarantors_keyboard()
            )
        else:
            await db.set_guarantor(user_id, True)
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name'] or user['username'] or user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º",
                reply_markup=get_admin_guarantors_keyboard()
            )
    
    elif action == "remove_guarantor":
        if not user.get('is_guarantor', False):
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['first_name'] or user['username'] or user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º",
                reply_markup=get_admin_guarantors_keyboard()
            )
        else:
            await db.set_guarantor(user_id, False)
            await message.answer(
                f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['first_name'] or user['username'] or user_id} —Å–Ω—è—Ç —Å—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∞",
                reply_markup=get_admin_guarantors_keyboard()
            )
    
    await state.clear()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–ê–ú–ò ===

@router.callback_query(F.data == "admin_chats")
async def show_admin_chats_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤
    chat_stats = await db.get_deal_chat_stats()
    
    stats_text = f"""
üí¨ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ —Å–¥–µ–ª–æ–∫**

**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {chat_stats['total_messages']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {chat_stats['active_chats']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Ç: {chat_stats['avg_messages_per_chat']}
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {chat_stats['system_messages']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤", callback_data="admin_list_chats")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º", callback_data="admin_search_messages")],
        [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_chat_detailed_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_list_chats")
async def list_deal_chats(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å–¥–µ–ª–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    chats = await db.get_all_deal_chats_summary(15)
    
    if not chats:
        chats_text = "üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å–¥–µ–ª–æ–∫**\n\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç."
    else:
        chats_text = "üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å–¥–µ–ª–æ–∫:**\n\n"
        
        for chat in chats:
            status_emoji = {
                'waiting_buyer': '‚è≥',
                'waiting_guarantor': 'üîç', 
                'in_progress': '‚ö°',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(chat['status'], '‚ùì')
            
            seller_name = chat['seller_name'] or chat['seller_username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            buyer_name = chat['buyer_name'] or chat['buyer_username'] or '–ù–µ—Ç' if chat['buyer_name'] or chat['buyer_username'] else '–ù–µ—Ç'
            
            last_msg_time = chat['last_message_time'][:16] if chat['last_message_time'] else '–ù–µ—Ç'
            
            chats_text += f"{status_emoji} **–°–¥–µ–ª–∫–∞ #{chat['id']}** (`{chat['deal_code']}`)\n"
            chats_text += f"üë• {seller_name} ‚Üî {buyer_name}\n"
            chats_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {chat['message_count']}\n"
            chats_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_msg_time}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_list_chats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_chats")]
    ])
    
    try:
        await callback.message.edit_text(
            chats_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
        try:
            await callback.message.answer(
                chats_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e2}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤", show_alert=True)
            return
    
    await callback.answer()

@router.callback_query(F.data == "admin_search_messages")
async def start_message_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_search_term)
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ —á–∞—Ç–∞—Ö**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_chats")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_search_term)
async def process_message_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    search_term = message.text.strip()
    if len(search_term) < 2:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_chats")]
            ])
        )
        return
    
    results = await db.search_deal_messages(search_term, 20)
    
    if not results:
        results_text = f"üîç **–ü–æ–∏—Å–∫ –ø–æ —á–∞—Ç–∞–º**\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_term}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        results_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞** –¥–ª—è ¬´{search_term}¬ª:\n\n"
        
        for result in results:
            sender_name = result['first_name'] or result['username'] or f"ID{result['user_id']}"
            message_preview = result['message_text'][:50] + "..." if len(result['message_text']) > 50 else result['message_text']
            timestamp = result['created_at'][:16] if result['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            results_text += f"üìã **–°–¥–µ–ª–∫–∞ #{result['deal_id']}** (`{result['deal_code']}`)\n"
            results_text += f"üë§ {sender_name}: {message_preview}\n"
            results_text += f"üïê {timestamp}\n\n"
            
            if len(results_text) > 3500:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                results_text += f"... –∏ –µ—â—ë {len(results) - results.index(result) - 1} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                break
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_search_messages")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —á–∞—Ç–∞–º", callback_data="admin_chats")]
    ])
    
    await message.answer(
        results_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.clear()

@router.callback_query(F.data == "admin_chat_detailed_stats")
async def show_detailed_chat_stats(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    stats = await db.get_deal_chat_stats()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async with aiosqlite.connect(db.db_path) as database:
        # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        async with database.execute(
            'SELECT message_type, COUNT(*) FROM deal_messages GROUP BY message_type'
        ) as cursor:
            message_types = dict(await cursor.fetchall())
        
        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        async with database.execute(
            '''SELECT deal_id, COUNT(*) as msg_count 
               FROM deal_messages 
               GROUP BY deal_id 
               ORDER BY msg_count DESC 
               LIMIT 5'''
        ) as cursor:
            top_chats = await cursor.fetchall()
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        async with database.execute(
            '''SELECT DATE(created_at) as day, COUNT(*) as count
               FROM deal_messages 
               WHERE created_at >= date('now', '-7 days')
               GROUP BY DATE(created_at)
               ORDER BY day DESC'''
        ) as cursor:
            daily_activity = await cursor.fetchall()
    
    detailed_text = f"""
üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤**

**üî¢ –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Ç: {stats['avg_messages_per_chat']}

**üìù –ü–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {message_types.get('user', 0)}
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ: {message_types.get('system', 0)}

**üèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:**
"""
    
    for i, (deal_id, msg_count) in enumerate(top_chats, 1):
        detailed_text += f"{i}. –°–¥–µ–ª–∫–∞ #{deal_id}: {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    if daily_activity:
        detailed_text += f"\n**üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
        for day, count in daily_activity:
            detailed_text += f"‚Ä¢ {day}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_chat_detailed_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —á–∞—Ç–∞–º", callback_data="admin_chats")]
    ])
    
    try:
        await callback.message.edit_text(
            detailed_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        try:
            await callback.message.answer(
                detailed_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e2}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
            return
    
    await callback.answer()

@router.message(Command("deal_chat"))
async def admin_deal_chat(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–¥—É (–∫–æ–º–∞–Ω–¥–∞ /deal_chat –∫–æ–¥)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —Å–¥–µ–ª–∫–∏\n"
                "–ü—Ä–∏–º–µ—Ä: `/deal_chat ABC123`",
                parse_mode="Markdown"
            )
            return
        
        deal_code = args[1].strip().upper()
        
        # –ò—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ –∫–æ–¥—É
        deal = await db.get_deal_by_code(deal_code)
        if not deal:
            await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ —Å –∫–æ–¥–æ–º `{deal_code}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="Markdown")
            return
        
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        wait_msg = await message.answer("üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —á–∞—Ç...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏)
        paste_result = await create_chat_paste(deal['id'], deal_code)
        
        if paste_result.startswith("http"):
            # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ pastebin/dpaste
            response_text = f"""
üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal['id']}**

üî¢ **–ö–æ–¥:** `{deal_code}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìÖ **–°—Ç–∞—Ç—É—Å:** {deal['status']}

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞:**
{paste_result}

‚úÖ **–≠—Ç–æ —Ç–∞ –∂–µ —Å—Å—ã–ª–∫–∞, —á—Ç–æ –ø–æ–ª—É—á–∞—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ!**

‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
"""
            disable_preview = True
        elif paste_result.startswith("–ß–∞—Ç —Å–¥–µ–ª–∫–∏"):
            # –í–æ–∑–≤—Ä–∞—â—ë–Ω —Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
            response_text = f"""
üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal['id']}**

üî¢ **–ö–æ–¥:** `{deal_code}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìÖ **–°—Ç–∞—Ç—É—Å:** {deal['status']}

üìù **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞:**

```
{paste_result}
```

‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–∫–∞–∑–∞–Ω –∫—Ä–∞—Ç–∫–∏–π —á–∞—Ç
"""
            disable_preview = False
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            response_text = f"""
üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal['id']}**

üî¢ **–ö–æ–¥:** `{deal_code}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìÖ **–°—Ç–∞—Ç—É—Å:** {deal['status']}

‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–∞:**
{paste_result}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.
"""
            disable_preview = False
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await wait_msg.delete()
        await message.answer(
            response_text,
            parse_mode="Markdown",
            disable_web_page_preview=disable_preview
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã deal_chat: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

@router.message(Command("complete_deal"))
async def admin_complete_deal(message: Message):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–¥ –∏–ª–∏ ID —Å–¥–µ–ª–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /complete_deal <–∫–æ–¥_—Å–¥–µ–ª–∫–∏>")
            return
        
        deal_identifier = command_parts[1].strip().upper()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É –ø–æ –∫–æ–¥—É –∏–ª–∏ ID
        deal = None
        if deal_identifier.isdigit():
            # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω —á–∏—Å–ª–æ–≤–æ–π ID
            deal = await db.get_deal_by_id(int(deal_identifier))
        else:
            # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –∫–æ–¥ —Å–¥–µ–ª–∫–∏
            deal = await db.get_deal_by_code(deal_identifier)
        
        if not deal:
            await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ {deal_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        if deal['status'] != 'in_progress':
            status_names = {
                'waiting_buyer': '–æ–∂–∏–¥–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
                'waiting_guarantor': '–æ–∂–∏–¥–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∞',
                'completed': '—É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω–∞'
            }
            status_name = status_names.get(deal['status'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
            await message.answer(f"‚ùå –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ ¬´{status_name}¬ª")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ)
        success = await db.complete_deal(deal['id'], message.from_user.id)
        
        if success:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–º
            admin_name = message.from_user.first_name or message.from_user.username or f"ID{message.from_user.id}"
            system_message = f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –∑–∞–≤–µ—Ä—à–∏–ª —Å–¥–µ–ª–∫—É"
            await db.add_deal_message(deal['id'], message.from_user.id, system_message, 'system')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            seller = await db.get_user(deal['seller_id'])
            buyer = await db.get_user(deal['buyer_id'])
            guarantor = await db.get_user(deal['guarantor_id']) if deal['guarantor_id'] else None
            
            formatted_amount = format_amount(deal['amount'], deal['currency_type'])
            
            success_text = f"""
‚úÖ **–°–¥–µ–ª–∫–∞ #{deal['id']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ:**
üî¢ –ö–æ–¥: `{deal['deal_code']}`
üí∞ –°—É–º–º–∞: {formatted_amount}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer['first_name'] or buyer['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ì–∞—Ä–∞–Ω—Ç: {guarantor['first_name'] or guarantor['username'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω' if guarantor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
"""
            
            await message.answer(success_text, parse_mode="Markdown")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
            completion_text = """
‚úÖ **–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**

–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã.
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.
"""
            
            bot = message.bot
            participants = [deal['seller_id'], deal['buyer_id']]
            if deal['guarantor_id']:
                participants.append(deal['guarantor_id'])
            
            for user_id in participants:
                if user_id != message.from_user.id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –∞–¥–º–∏–Ω—É
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=completion_text,
                            reply_markup=get_rating_keyboard() if user_id in [deal['seller_id'], deal['buyer_id']] else get_back_to_main_keyboard(),
                            parse_mode="Markdown"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}: {e}")
            
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω–æ–º: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("cancel_deal"))
async def admin_cancel_deal(message: Message):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–¥ –∏–ª–∏ ID —Å–¥–µ–ª–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel_deal <–∫–æ–¥_—Å–¥–µ–ª–∫–∏>")
            return
        
        deal_identifier = command_parts[1].strip().upper()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É –ø–æ –∫–æ–¥—É –∏–ª–∏ ID
        deal = None
        if deal_identifier.isdigit():
            # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω —á–∏—Å–ª–æ–≤–æ–π ID
            deal = await db.get_deal_by_id(int(deal_identifier))
        else:
            # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –∫–æ–¥ —Å–¥–µ–ª–∫–∏
            deal = await db.get_deal_by_code(deal_identifier)
        
        if not deal:
            await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ {deal_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        if deal['status'] in ['completed', 'cancelled']:
            status_name = '—É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' if deal['status'] == 'completed' else '—É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞'
            await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ {status_name}")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        success = await db.cancel_deal(deal['id'], message.from_user.id)
        
        if success:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∞–¥–º–∏–Ω–æ–º
            admin_name = message.from_user.first_name or message.from_user.username or f"ID{message.from_user.id}"
            system_message = f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É"
            await db.add_deal_message(deal['id'], message.from_user.id, system_message, 'system')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            seller = await db.get_user(deal['seller_id'])
            buyer = await db.get_user(deal['buyer_id']) if deal['buyer_id'] else None
            guarantor = await db.get_user(deal['guarantor_id']) if deal['guarantor_id'] else None
            
            formatted_amount = format_amount(deal['amount'], deal['currency_type'])
            
            success_text = f"""
‚ùå **–°–¥–µ–ª–∫–∞ #{deal['id']} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ:**
üî¢ –ö–æ–¥: `{deal['deal_code']}`
üí∞ –°—É–º–º–∞: {formatted_amount}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller['first_name'] or seller['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer['first_name'] or buyer['username'] or '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' if buyer else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
üë®‚Äçüíº –ì–∞—Ä–∞–Ω—Ç: {guarantor['first_name'] or guarantor['username'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω' if guarantor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.
"""
            
            await message.answer(success_text, parse_mode="Markdown")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
            cancellation_text = """
‚ùå **–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**

–í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã.
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
            
            bot = message.bot
            participants = [deal['seller_id']]
            if deal['buyer_id']:
                participants.append(deal['buyer_id'])
            if deal['guarantor_id']:
                participants.append(deal['guarantor_id'])
            
            for user_id in participants:
                if user_id != message.from_user.id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –∞–¥–º–∏–Ω—É
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=cancellation_text,
                            reply_markup=get_back_to_main_keyboard(),
                            parse_mode="Markdown"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}: {e}")
            
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –∞–¥–º–∏–Ω–æ–º: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def create_chat_paste(deal_id: int, deal_code: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Å—Ç—ã —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏)
        export_data = await db.get_deal_chat_export_data(deal_id)
        
        if not export_data:
            return "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏)
        export_text = await format_chat_export(export_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ pastebin (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏)
        pastebin_url = await upload_to_pastebin(export_text, f"Chat_Deal_{deal_id}")
        
        if pastebin_url:
            return pastebin_url
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é —á–∞—Ç–∞
            messages = export_data['messages']
            if not messages:
                return "–ß–∞—Ç —Å–¥–µ–ª–∫–∏ –ø—É—Å—Ç"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ Telegram
            deal = export_data['deal']
            chat_text = f"=== –ß–ê–¢ –°–î–ï–õ–ö–ò {deal_code} ===\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            recent_messages = messages[-10:] if len(messages) > 10 else messages
            
            for msg in recent_messages:
                timestamp = msg['created_at'][:19] if msg['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                if msg['message_type'] == 'system':
                    chat_text += f"[{timestamp}] –°–ò–°–¢–ï–ú–ê: {msg['message_text']}\n"
                else:
                    name = msg['first_name'] or msg['username'] or f"ID{msg['user_id']}"
                    if msg['user_id'] == deal['seller_id']:
                        role = "–ü–†–û–î–ê–í–ï–¶"
                    elif msg['user_id'] == deal['buyer_id']:
                        role = "–ü–û–ö–£–ü–ê–¢–ï–õ–¨"
                    elif msg['user_id'] == deal['guarantor_id']:
                        role = "–ì–ê–†–ê–ù–¢"
                    else:
                        role = "–£–ß–ê–°–¢–ù–ò–ö"
                    
                    chat_text += f"[{timestamp}] {name} ({role}): {msg['message_text']}\n"
            
            if len(messages) > 10:
                chat_text += f"\n... –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            chat_text += f"\n\n=== –ö–û–ù–ï–¶ –ß–ê–¢–ê ==="
            
            return f"–ß–∞—Ç —Å–¥–µ–ª–∫–∏ (–≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã):\n\n{chat_text}"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Å—Ç—ã —á–∞—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

@router.callback_query(F.data.startswith("admin_view_chat_"))
async def admin_view_chat(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    deal_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
    deal = await db.get_deal_by_id(deal_id)
    if not deal:
        await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await callback.answer("üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —á–∞—Ç...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏)
    paste_result = await create_chat_paste(deal_id, deal['deal_code'])
    
    if paste_result.startswith("http"):
        # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ pastebin/dpaste
        response_text = f"""
üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**

üî¢ **–ö–æ–¥:** `{deal['deal_code']}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìÖ **–°—Ç–∞—Ç—É—Å:** {deal['status']}

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞:**
{paste_result}

‚úÖ **–≠—Ç–æ —Ç–∞ –∂–µ —Å—Å—ã–ª–∫–∞, —á—Ç–æ –ø–æ–ª—É—á–∞—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ!**

‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
"""
        disable_preview = True
    elif paste_result.startswith("–ß–∞—Ç —Å–¥–µ–ª–∫–∏"):
        # –í–æ–∑–≤—Ä–∞—â—ë–Ω —Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
        response_text = f"""
üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**

üî¢ **–ö–æ–¥:** `{deal['deal_code']}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìÖ **–°—Ç–∞—Ç—É—Å:** {deal['status']}

üìù **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞:**

```
{paste_result}
```

‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–∫–∞–∑–∞–Ω –∫—Ä–∞—Ç–∫–∏–π —á–∞—Ç
"""
        disable_preview = False
    else:
        # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        response_text = f"""
üí¨ **–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}**

üî¢ **–ö–æ–¥:** `{deal['deal_code']}`
üí∞ **–°—É–º–º–∞:** {format_amount(deal['amount'], deal['currency_type'])}
üìÖ **–°—Ç–∞—Ç—É—Å:** {deal['status']}

‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–∞:**
{paste_result}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.
"""
        disable_preview = False
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"admin_view_chat_{deal_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–¥–µ–ª–æ–∫", callback_data="admin_deals")]
    ])
    
    try:
        await callback.message.edit_text(
            response_text,
            reply_markup=keyboard,
            parse_mode="Markdown",
            disable_web_page_preview=disable_preview
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        try:
            await callback.message.answer(
                response_text,
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=disable_preview
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {e2}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞", show_alert=True)

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ê–ú–ï–†–ê–ú–ò ===

@router.callback_query(F.data == "admin_scammers")
async def show_admin_scammers_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    scammers = await db.get_all_scammers()
    
    menu_text = f"""
üö´ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–º–µ—Ä–∞–º–∏**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(scammers)}

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–º–µ—Ä–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø—Ä—É—Ñ–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞", callback_data="admin_add_scammer")],
        [InlineKeyboardButton(text="üëÄ –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤", callback_data="admin_list_scammers")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞", callback_data="admin_remove_scammer")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add_scammer")
async def start_add_scammer(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_scammer_id)
    
    await callback.message.edit_text(
        """
üö´ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–º–µ—Ä–∞**

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤:

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–≤ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_scammers")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_scammer_id)
async def process_scammer_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Å–∫–∞–º–µ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_scammers")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == OWNER_ID:
        await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
            ])
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    if await db.is_scammer(user_id):
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–∫–∞–º–µ—Ä–æ–≤!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
            ])
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(scammer_id=user_id)
    await state.set_state(AdminStates.waiting_for_scammer_description)
    
    user = await db.get_user(user_id)
    user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if user:
        user_name = user.get('first_name') or user.get('username') or f"ID{user_id}"
    
    await message.answer(
        f"""
üö´ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–º–µ—Ä–∞**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: `{user_id}`)

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä—É—Ñ–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —á–∞—Ç—ã:

**–ü—Ä–∏–º–µ—Ä:**
```
–ú–æ—à–µ–Ω–Ω–∏–∫ –ø—Ä–æ–¥–∞—ë—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã.

–ü—Ä—É—Ñ—ã:
1. –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏: t.me/c/...
2. –í–∏–¥–µ–æ –æ–±–º–∞–Ω: t.me/c/...
3. –ñ–∞–ª–æ–±—ã –æ—Ç –∂–µ—Ä—Ç–≤: @channel

–ì—Ä—É–ø–ø–∞ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö: t.me/victims_chat
```

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ–±–º–∞–Ω–∞
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–º–∏
""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_scammers")]
        ]),
        parse_mode="Markdown"
    )

@router.message(AdminStates.waiting_for_scammer_description)
async def process_scammer_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    description = message.text.strip()
    if len(description) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä—É—Ñ–∞–º–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_scammers")]
            ])
        )
        return
    
    data = await state.get_data()
    scammer_id = data['scammer_id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–∞–º–µ—Ä–∞ –≤ –±–∞–∑—É
    success = await db.add_scammer(scammer_id, description, message.from_user.id)
    
    if success:
        user = await db.get_user(scammer_id)
        user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if user:
            user_name = user.get('first_name') or user.get('username') or f"ID{scammer_id}"
        
        success_text = f"""
‚úÖ **–°–∫–∞–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: `{scammer_id}`)
**–û–ø–∏—Å–∞–Ω–∏–µ:** {description[:200]}{'...' if len(description) > 200 else ''}

–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–∫–∞–º–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="admin_add_scammer")],
            [InlineKeyboardButton(text="üëÄ –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤", callback_data="admin_list_scammers")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_scammers")]
        ])
        
        await message.answer(
            success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∫–∞–º–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
            ])
        )
    
    await state.clear()

@router.callback_query(F.data == "admin_list_scammers")
async def list_scammers_admin(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    scammers = await db.get_all_scammers()
    
    if not scammers:
        await callback.message.edit_text(
            "üö´ **–°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤**\n\n‚úÖ –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤ –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞", callback_data="admin_add_scammer")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
            ]),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    scammers_text = f"üö´ **–°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤** ({len(scammers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n\n"
    
    for i, scammer in enumerate(scammers[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        name = scammer['first_name'] or scammer['username'] or f"ID{scammer['user_id']}"
        date = scammer['created_at'][:10] if scammer['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        added_by_name = scammer['added_by_name'] or scammer['added_by_username'] or f"ID{scammer['added_by']}"
        
        scammers_text += f"**{i}. {name}** (ID: `{scammer['user_id']}`)\n"
        scammers_text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {date}\n"
        scammers_text += f"üë§ –ö–µ–º: {added_by_name}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è
        description_short = scammer['description'][:150] + "..." if len(scammer['description']) > 150 else scammer['description']
        scammers_text += f"üìù {description_short}\n\n"
        
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º –¥–ª—è Telegram
        if len(scammers_text) > 3500:
            scammers_text += f"... –∏ –µ—â—ë {len(scammers) - i} —Å–∫–∞–º–µ—Ä–æ–≤\n\n"
            break
    
    if len(scammers) > 10 and len(scammers_text) <= 3500:
        scammers_text += f"... –∏ –µ—â—ë {len(scammers) - 10} —Å–∫–∞–º–µ—Ä–æ–≤\n\n"
    
    scammers_text += "üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–£–¥–∞–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞\""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add_scammer"),
         InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="admin_remove_scammer")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_list_scammers")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
    ])
    
    try:
        await callback.message.edit_text(
            scammers_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            scammers_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

@router.callback_query(F.data == "admin_remove_scammer")
async def start_remove_scammer(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_for_remove_scammer_id)
    
    scammers = await db.get_all_scammers()
    
    if not scammers:
        await callback.message.edit_text(
            "üö´ **–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∞–º–µ—Ä–∞**\n\n‚ùå –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤ –ø—É—Å—Ç - –Ω–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
            ]),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    scammers_list = ""
    for scammer in scammers[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
        name = scammer['first_name'] or scammer['username'] or f"ID{scammer['user_id']}"
        scammers_list += f"‚Ä¢ {name} - ID: `{scammer['user_id']}`\n"
    
    if len(scammers) > 15:
        scammers_list += f"... –∏ –µ—â—ë {len(scammers) - 15} —Å–∫–∞–º–µ—Ä–æ–≤"
    
    await callback.message.edit_text(
        f"""
üö´ **–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∞–º–µ—Ä–∞**

**–¢–µ–∫—É—â–∏–µ —Å–∫–∞–º–µ—Ä—ã:**
{scammers_list}

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–º–µ—Ä–æ–≤:
""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_scammers")]
        ]),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(AdminStates.waiting_for_remove_scammer_id)
async def process_remove_scammer_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_scammers")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Å–∫–∞–º–µ—Ä–æ–≤
    if not await db.is_scammer(user_id):
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å–∫–∞–º–µ—Ä–æ–≤!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
            ])
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞–º–µ—Ä–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    scammer_info = await db.get_scammer_info(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–∫–∞–º–µ—Ä–∞
    success = await db.remove_scammer(user_id, message.from_user.id)
    
    if success:
        user_name = scammer_info['first_name'] or scammer_info['username'] or f"ID{user_id}"
        
        success_text = f"""
‚úÖ **–°–∫–∞–º–µ—Ä —É–¥–∞–ª—ë–Ω!**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} (ID: `{user_id}`)

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–∫–∞–º–µ—Ä–æ–≤.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –µ—â—ë", callback_data="admin_remove_scammer")],
            [InlineKeyboardButton(text="üëÄ –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤", callback_data="admin_list_scammers")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_scammers")]
        ])
        
        await message.answer(
            success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–∞–º–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_scammers")]
            ])
        )
    
    await state.clear()